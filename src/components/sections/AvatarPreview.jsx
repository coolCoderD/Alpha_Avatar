import React, { useState, useEffect, useRef } from "react";

const AvatarPreview = ({ featureArray }) => {
  const [previewImage, setPreviewImage] = useState(null);
  const [loading, setLoading] = useState(false); // Loading state
  const canvasRef = useRef(null);
  const originalWidth = 5000; // Original image width
  const originalHeight = 5000; // Original image height
  const canvasWidth = 450; // Canvas width in portrait
  const canvasHeight = 450; // Canvas height in portrait
  
  // Calculate scaling factors for portrait orientation
  const scaleX = canvasWidth / originalWidth;
  const scaleY = canvasHeight / originalHeight;

  // Utility to scale values between 0-100
  const toCanvasScale = (value, isWidth = false) => value * (isWidth ? scaleX : scaleY);

  const drawCanvas = async () => {
    setLoading(true); // Set loading to true when drawing starts
    try {
      const canvas = canvasRef.current;
      if (!canvas) return;

      const ctx = canvas.getContext("2d");
      ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas

      // Draw all features
      await Promise.all(
        featureArray.map(
          (feature) =>
            new Promise((resolve, reject) => {
              const img = new Image();
              img.crossOrigin = "anonymous"; // Bypass CORS issues
              img.src = `https://alphavatar.fun/${feature.path}`;
              img.onload = () => {
                ctx.drawImage(
                  img,
                  toCanvasScale(feature.x),
                  toCanvasScale(feature.y),
                  toCanvasScale(feature.width, true),
                  toCanvasScale(feature.height, true)
                );
                resolve();
              };
              img.onerror = (err) => {
                console.error(`Failed to load image: ${feature.path}`, err);
                reject(err);
              };
            })
        )
      );



      // Capture the canvas as a preview image
      const imageBlob = await new Promise((resolve) =>
        canvas.toBlob(resolve, "image/png")
      );
      const url = URL.createObjectURL(imageBlob);
      setPreviewImage(url);
    } catch (error) {
      console.error("Error drawing on canvas:", error);
    } finally {
      setLoading(false); // Set loading to false when done
    }
  };

  useEffect(() => {
    // Redraw the canvas whenever the `featureArray` changes
    if (featureArray && featureArray.length > 0) {
      drawCanvas();
    }
  }, [featureArray]);
  console.log(previewImage);

  return (
    <div className="avatar-preview-container ">
      {/* Display a loading spinner or message */}
      {loading && (
        <div className="loading-spinner" style={{ textAlign: "center", margin: "20px" }}>
          <p>Loading...</p>
        </div>
      )}
      {/* Canvas for drawing features */}
      <div className="w-full h-full  bg-red-900">
      <canvas
        id="mainCanvas"
        width={canvasWidth}
        height={canvasHeight}
        ref={canvasRef}
        style={{ display: "none" }} // Hide the canvas, only show the preview image
      />
      </div>
      {/* Render the preview image */}
      {!loading && previewImage && (
        <div className="relative  preview-image-container overflow-hidden bg-white rounded-xl mt-4">
          <div className="w-full h-full p-16 ">
          <img
            src={previewImage}
            alt="Avatar Preview"
            className="preview-image object-cover p-6 rounded-xl"
            style={{
              width: "100%", // Ensure the image fits the container
              maxWidth: "500px", // Limit the width for display
              margin: "0 auto",
              display: "block",
              background: "white",
              position:""
              
            }}
            
          />
          </div>
<div className=" flex items-center justify-center gap-2 absolute bottom-40 left-72">
  {/* <img
    src="https://res.cloudinary.com/drts3ztiy/image/upload/v1733924615/sign_bofhe9.png"  // Example direct image URL
    className="h-24 w-80 absolute  -right-[1%] -bottom-[4%]" 
    alt="Unsplash Image"
  /> */}
  <svg width="18" height="14" viewBox="0 0 18 14" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_0_181)">
<path d="M10.7826 6.08426C10.8962 5.78854 10.9912 5.59122 11.0486 5.38382C11.4607 3.89603 11.8653 2.40624 12.2716 0.916905C12.2871 0.860204 12.2787 0.789181 12.311 0.74657C12.3854 0.648539 12.478 0.563922 12.5632 0.473861C12.6282 0.590406 12.7602 0.714823 12.7471 0.822182C12.678 1.39082 12.6266 1.97022 12.4692 2.51809C12.0432 4.00044 11.5641 5.46795 11.1146 6.94387C11.0702 7.08975 11.0473 7.26059 11.0782 7.4068C11.2008 7.98751 11.3488 8.56304 11.4874 9.14048C11.5289 9.14111 11.5703 9.14173 11.6118 9.14235C11.865 8.44427 12.078 7.72856 12.3843 7.05386C12.6173 6.54061 12.9218 6.04065 13.2874 5.61143C13.4713 5.39558 13.8543 5.27511 14.1609 5.24506C14.6597 5.19615 14.909 5.58947 14.7335 6.04304C14.1834 5.58259 13.7802 5.62147 13.3471 6.22745C13.1524 6.4998 13.0009 6.81425 12.8903 7.13011C12.5984 7.96338 12.3749 8.82115 12.0551 9.64314C11.8492 10.1722 11.9587 10.6017 12.2174 11.0586C12.9498 12.3518 13.7732 12.4115 14.6694 11.229C14.9081 10.9141 15.0537 10.6073 14.9947 10.1789C14.8844 9.37847 14.8544 8.56737 14.7894 7.76083C14.7824 7.67306 14.7897 7.57158 14.7475 7.50139C14.5958 7.24884 14.4542 6.97616 14.2407 6.78475C14.1928 6.74183 13.8686 6.99753 13.5992 7.15915C13.5992 6.97923 13.5262 6.71541 13.614 6.64453C13.8133 6.48364 14.099 6.31739 14.3365 6.33412C14.8224 6.36836 15.0938 6.74967 15.1965 7.18393C15.3315 7.75456 15.3993 8.34072 15.492 8.92083C15.5216 9.10613 15.5383 9.29342 15.638 9.49404C15.8917 8.93914 16.1453 8.38425 16.399 7.82935C16.4699 7.83947 16.5408 7.84959 16.6118 7.85971C16.6379 8.10215 16.7445 8.36994 16.6754 8.58239C16.4446 9.29228 16.1341 9.97676 15.8903 10.6831C15.8052 10.9298 15.7515 11.2297 15.8133 11.4734C15.9244 11.9112 16.1131 12.3343 16.3066 12.7466C16.616 13.4062 16.9839 13.515 17.6382 13.1834C17.7402 13.1317 17.8474 13.0901 18 13.0228C17.9633 13.4735 17.7728 13.7656 17.3961 13.9078C16.9563 14.0737 16.5051 14.0265 16.1947 13.6778C15.9153 13.3641 15.7172 12.9745 15.5157 12.6015C15.3845 12.3586 15.3113 12.0853 15.2095 11.8186C13.5354 13.2507 12.894 13.1857 11.5629 11.4309C11.4433 11.7181 11.3482 11.9914 11.2177 12.2472C11.0844 12.5084 10.9403 12.771 10.7578 12.9996C10.4808 13.3465 10.1053 13.5359 9.65045 13.4008C9.19328 13.265 8.94462 12.9228 8.86626 12.4671C8.83302 12.2737 8.83143 12.0751 8.81407 11.8619C9.05627 12.1369 9.24848 12.3907 9.47806 12.6059C9.71465 12.8277 10.0249 12.8191 10.1661 12.5369C10.513 11.8435 10.8208 11.1286 11.0941 10.4041C11.1529 10.2485 10.9995 10.0157 10.9445 9.81824C10.8066 9.32267 10.6692 8.82699 10.5121 8.2614C10.4109 8.43509 10.3479 8.57619 10.2559 8.69588C9.67256 9.45563 9.18228 10.3195 8.47517 10.9454C6.82919 12.4022 4.87014 12.7341 2.78782 11.9904C1.02805 11.3619 0.290186 9.96545 0.0564412 8.22004C-0.12205 6.88721 0.128533 5.6487 0.726997 4.45667C1.35743 3.20098 2.17476 2.08054 3.24965 1.16351C4.47087 0.121629 5.84946 -0.341312 7.43706 0.280873C8.36999 0.646492 9.0638 1.32401 9.44933 2.20708C9.91861 3.28196 10.2502 4.41518 10.6374 5.52452C10.6891 5.67284 10.7173 5.82914 10.7826 6.08426ZM0.85192 7.41028C0.855852 9.26637 1.53951 10.467 3.04596 11.1781C4.03425 11.6446 5.05419 11.7009 6.10423 11.4331C7.7221 11.0206 8.7356 9.91642 9.60256 8.58695C10.1725 7.71292 10.4112 6.87012 10.021 5.8658C9.57484 4.71731 9.32182 3.4784 8.75111 2.39842C7.73004 0.466211 5.65174 0.110056 3.96085 1.5148C3.30823 2.05697 2.75086 2.73731 2.25299 3.42668C1.42099 4.57869 0.815688 5.83831 0.85192 7.41028Z" fill="url(#paint0_linear_0_181)"/>
</g>
<defs>
<linearGradient id="paint0_linear_0_181" x1="9" y1="0" x2="9" y2="14" gradientUnits="userSpaceOnUse">
<stop stop-color="#7186FF"/>
<stop offset="1" stop-color="#F97689"/>
</linearGradient>
<clipPath id="clip0_0_181">
<rect width="18" height="14" fill="white"/>
</clipPath>
</defs>
</svg>
<svg width="84" height="24" viewBox="0 0 84 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M4.71747 9.92383C4.44794 10.0059 4.18427 10.0996 3.92645 10.1992C2.84833 10.627 1.79364 11.2422 1.24872 12.4199C1.11981 12.6953 0.815125 12.8066 0.551453 12.6602C0.2995 12.5137 0.19989 12.1738 0.334656 11.8926C1.00848 10.4336 2.23309 9.64844 3.58075 9.11523C4.21942 8.86328 4.88153 8.66992 5.56122 8.51172C5.68427 8.31836 5.81317 8.125 5.94208 7.93164C7.25458 6.00977 8.95966 4.01172 10.7643 2.65234C11.4968 2.10156 12.4167 1.52734 13.3015 1.375C13.8815 1.27539 14.5612 1.29297 14.9655 1.83789C15.112 2.03711 15.1999 2.2832 15.2292 2.53516C15.3347 3.29102 15.0124 4.28125 14.7604 4.97852C14.4089 5.93359 13.987 6.87109 13.571 7.79688C13.8522 7.79688 14.1276 7.80273 14.403 7.80273C14.6901 7.80859 14.9128 8.06641 14.9069 8.38281C14.9011 8.71094 14.6725 8.95703 14.3913 8.95703C13.946 8.95117 13.5065 8.95117 13.0612 8.95117C12.2585 10.7617 11.3386 12.918 10.946 14.8516C10.8874 15.1621 10.6179 15.3555 10.3307 15.2852C10.0495 15.2207 9.87958 14.916 9.93817 14.6055C10.319 12.7188 11.1393 10.7266 11.9011 8.96875C10.0729 9.02148 7.97528 9.17969 6.16473 9.55469C6.09442 9.66016 6.02997 9.77148 5.96552 9.88281C4.8288 11.7871 3.42255 14.7695 3.73895 17.125C3.80927 17.6348 3.96161 18.1094 4.21356 18.5371C4.37177 18.7949 4.31317 19.1523 4.0788 19.3281C3.8327 19.5098 3.5163 19.4453 3.35809 19.1816C3.01825 18.6191 2.80731 17.9805 2.71942 17.3008C2.3913 14.875 3.53387 12.0508 4.71747 9.92383ZM12.4167 7.80859C12.8913 6.74805 13.4011 5.64062 13.7995 4.55078C13.9636 4.10547 14.2741 3.19727 14.2097 2.71094C14.2038 2.66992 14.1921 2.60547 14.1686 2.57031C14.0632 2.42969 13.5886 2.48828 13.4538 2.51172C12.739 2.63477 11.9304 3.16211 11.3386 3.60742C9.75653 4.79688 8.23895 6.53125 7.03778 8.23047C8.80145 7.95508 10.6296 7.83789 12.4167 7.80859ZM21.0713 10.0176C21.4053 9.61914 22.1787 10.252 21.8506 10.6504C20.7431 12.0098 19.2139 13.5859 17.6377 14.3184C14.9951 15.5488 13.7705 13.7793 14.749 10.6445C15.3291 8.78125 17.9131 2.86914 20.0693 1.97266C21.2822 1.47461 22.331 2.8457 20.1103 5.80469C18.7392 7.62695 17.333 9.16211 15.751 10.7969C15.2471 12.3496 14.8838 14.5 17.2099 13.416C18.6455 12.748 20.0693 11.248 21.0713 10.0176ZM18.8154 4.75586C17.9951 5.98047 17.2099 7.46289 16.8642 8.14844C17.4267 7.5332 18.5869 6.26172 19.4189 5.04883C20.8017 3.02734 20.3447 2.4707 18.8154 4.75586ZM30.429 9.89453C30.6399 10.0352 30.7981 10.7266 30.3352 10.8203C28.6829 11.1426 26.2981 11.7285 24.968 12.8301C24.6516 13.0938 22.6419 14.8926 22.4895 13.6035C22.4016 12.8594 24.3411 11.9922 24.7102 11.7344C25.8235 10.9434 27.0247 8.16016 25.0911 9.48438C23.2454 10.7441 21.4114 13.3223 20.2044 15.2148C19.7415 16.5449 17.7376 22.4512 16.6594 22.9492C16.0911 23.2129 15.4817 22.832 15.845 21.584C16.0266 20.9688 16.2962 20.3359 16.5657 19.75C17.345 18.0449 18.3001 16.3516 19.302 14.7695C19.6946 13.9668 20.2571 10.9023 20.5735 10.1406C20.7493 9.71289 21.9094 10.0879 21.7864 10.4746C21.6341 10.9375 21.4876 11.4004 21.3352 11.8633C26.1106 5.72266 27.9094 8.56445 26.7493 10.7559C27.3704 10.5039 30.0657 9.64844 30.429 9.89453ZM38.7203 10.1055C38.9839 9.66016 39.8453 10.1641 39.5816 10.6152C38.8375 11.8691 37.232 13.2461 35.7437 13.7266C34.0445 14.2715 33.4937 13.5742 33.1363 11.9453C32.5386 9.20898 29.5738 14.418 29.3453 15.1797C29.1578 15.8301 28.0562 15.6426 28.1675 14.752C28.525 11.8281 31.2027 6.36133 32.4566 4.2168C33.6461 2.18359 34.7593 1.65625 35.5504 2.02539C36.6109 2.51758 36.4 5.19531 32.7203 8.74609C30.189 11.1953 30.6578 9.74805 29.6851 12.7129C30.5523 11.248 33.3355 8.20703 34.0855 11.3125C34.3961 12.5898 34.4488 13.3164 35.8023 12.748C36.9566 12.2617 38.1461 11.0664 38.7203 10.1055ZM33.3414 4.76758C32.6148 5.98047 31.9293 7.33984 31.3199 8.68164C32.0875 8.00195 33.4468 6.61328 34.3199 5.27148C35.8082 3.00391 34.9351 2.125 33.3414 4.76758ZM42.6874 9.40234C43.5253 8.49414 43.537 8.21289 44.1171 8.75195C44.2987 8.92773 44.3807 9.12109 44.1639 9.37305C43.6659 9.95898 42.1659 12.4609 43.0506 13.2637C44.1463 14.248 47.1112 11.3359 47.9491 10.1758C48.2479 9.76562 49.0565 10.416 48.7108 10.8262C47.5799 12.1562 45.1893 14.8164 43.1385 14.5352C41.703 14.3359 41.4745 12.7246 41.8085 11.6992C40.9471 12.4961 38.9198 14.3418 37.9296 13.2344C36.4881 11.6172 40.701 6.625 42.6874 9.40234ZM41.9784 10.1465C41.0585 8.40625 38.5858 11.1191 38.7323 12.3496C38.8436 13.2754 41.8378 10.2812 41.9784 10.1465ZM52.9474 7.0293C53.3693 6.72461 54.0959 7.81445 53.6623 8.10156C51.8986 9.25586 50.1994 12.0859 48.881 13.3398C48.213 13.9727 47.5919 13.8086 47.3869 13.1641C47.1115 12.2969 47.2814 10.7969 47.4103 10.252C47.5334 9.74219 48.506 9.97656 48.383 10.4805C48.2423 11.0723 47.7677 13.252 48.7755 12.0859C50.2169 10.416 51.3771 8.38867 52.9474 7.0293ZM58.0629 9.40234C58.9008 8.49414 58.9125 8.21289 59.4926 8.75195C59.6743 8.92773 59.7563 9.12109 59.5395 9.37305C59.0414 9.95898 57.5414 12.4609 58.4262 13.2637C59.5219 14.248 62.4868 11.3359 63.3246 10.1758C63.6235 9.76562 64.4321 10.416 64.0864 10.8262C62.9555 12.1562 60.5649 14.8164 58.5141 14.5352C57.0786 14.3359 56.85 12.7246 57.184 11.6992C56.3227 12.4961 54.2953 14.3418 53.3051 13.2344C51.8637 11.6172 56.0766 6.625 58.0629 9.40234ZM57.3539 10.1465C56.434 8.40625 53.9614 11.1191 54.1078 12.3496C54.2192 13.2754 57.2133 10.2812 57.3539 10.1465ZM71.5046 5.1543C70.157 5.00195 67.5964 4.9668 66.3718 5.00195C65.3288 6.78906 61.1863 15.5723 63.4538 16.7031C63.8523 17.0078 62.9441 18.1855 62.4753 17.752C59.9089 15.584 64.2273 6.85352 65.2234 5.01953C63.6296 5.03125 60.448 5.13672 59.8562 6.05078C59.5691 6.47266 58.6374 5.75195 58.9363 5.3125C59.821 4.02344 64.4382 4.11133 65.7331 4.08789C65.9031 3.80078 66.9929 1.53906 67.321 1.08789C67.5788 0.730469 68.5984 1.36914 68.241 1.86719C68.0886 2.07812 67.7605 2.49414 66.9109 4.07617L71.5808 4.05273C72.1023 4.04102 72.0202 5.14258 71.5046 5.1543ZM70.5323 9.40234C71.3701 8.49414 71.3819 8.21289 71.9619 8.75195C72.1436 8.92773 72.2256 9.12109 72.0088 9.37305C71.5108 9.95898 70.0108 12.4609 70.8955 13.2637C71.9912 14.248 74.9561 11.3359 75.794 10.1758C76.0928 9.76562 76.9014 10.416 76.5557 10.8262C75.4248 12.1562 73.0342 14.8164 70.9834 14.5352C69.5479 14.3359 69.3194 12.7246 69.6534 11.6992C68.792 12.4961 66.7647 14.3418 65.7744 13.2344C64.333 11.6172 68.5459 6.625 70.5323 9.40234ZM69.8233 10.1465C68.9034 8.40625 66.4307 11.1191 66.5772 12.3496C66.6885 13.2754 69.6826 10.2812 69.8233 10.1465ZM82.3509 9.87695C82.8196 9.67773 83.2767 10.6152 82.8021 10.7969C79.5325 12.0449 78.9642 10.1934 78.0677 10.2402C77.0364 10.2871 75.6185 13.4922 75.1146 14.4473C74.9095 14.834 74.0071 14.3945 74.1302 13.9668L75.3841 10.0176C75.5657 9.56641 76.4681 9.93555 76.3392 10.3984C79.1282 6.61328 78.8118 11.4004 82.3509 9.87695Z" fill="url(#paint0_linear_0_183)"/>
<defs>
<linearGradient id="paint0_linear_0_183" x1="-93" y1="11" x2="175" y2="11" gradientUnits="userSpaceOnUse">
<stop stop-color="#7186FF"/>
<stop offset="1" stop-color="#F97689"/>
</linearGradient>
</defs>
</svg>

</div>

        </div>
      )}
    </div>
  );
};

export default AvatarPreview;
